---
layout: single
excerpt: ""
title: "추천 시스템을 만들어보자."
date: 2020-04-12 13:07:00 +0900
tags: recommender
---

사용자 클러스터링

인기
성별 & 연령
카테고리
행동기반

모델 기반의 학습에서 실시간 추천 학습으로

feature matrix를 주기적으로 저장
검색 엔진에 저장(ranking을 매길 수 있게)
query cluster에서 검색엔진에 요청(feature를 쿼리로 삼아 랭킹된 결과를 near realtime으로 가져오도록)
grpc 통신

부분적으로 아이템 정보를 확실하게 가져올 수 있도록 in memory cache 를 둠


실시간 개인화 추천을 위한 개선 작업


쿠팡의 실시간 개인화 추천을 방법을 참고하여 현재 인기 및 추천 상품을 실시간(near realtime)으로 반영할 수 있도록 개선하고자 한다.

## 헬로마켓 추천 시스템

현재 헬로마켓의 추천 시스템은 다음과 같다.

```
TreasureData -> HM-Personal-Recommender(Batch) -> Recommender(gRPC) -> Redis -> Recommender(gRPC) -> API
```

HM-Personal-Recommender에서 주기적으로 TD에 저장되어있는 사용자 로그를 조회하여 개인화 추천을 위한 사용자 클러스터링 정보와 추천 상품을 추출하여 gRPC를 통해 REDIS에 저장한다. REDIS에 저장된 사용자 클러스터링 정보 및 추천 상품 정보는 gRPC를 이용하여 API에서 서빙된다.

이 방식은 주기적으로 미리 계산해서 Cache storage에 저장하기 때문에 API에서 서빙할 때 계산량이 적어 빠르게 서빙할 수 있다는 장점이 있다. 반면, 한번 추출된 추천 상품이 갱신되기까지 많은 시간이 소요되어 실시간 추천을 진행하기 어렵고 개인화 추천이 어렵다는 단점이 있다. 이러한 문제를 해결하기 위해 이 글에서는 미리 추천 상품을 추출하지 않고 추천에 필요한 feature 정보만 실시간으로 저장하고 ElasticSearch를 이용하여 feature에 대한 점수를 바로 계산하여 실시간 추천 시스템으로 개선하고자 한다. 

## 쿠팡의 실시간 추천 시스템

https://tv.naver.com/v/11212875

위 링크를 살펴보면 쿠팡에서 개선한 실시간 추천 시스템에 대하여 설명하고 있다.

간략히 설명하면, 빅데이터 스토리지에서 raw data를 추출하여 ML한 결과로 추천에 필요한 feature vector를 만들고 이를 상품 정보와 결합하여 Hbase에 matrix로 저장한다. HBase에 저장된 데이터는 Search Cluster에 feature에 맞는 점수를 계산하고 이를 기반으로 상품의 순서를 인기순으로 정렬하여 반환하는 역할을 한다. Query Handler는 API에서 요청한 정보와 사용자의 클러스터링 정보를 조합하여 적합한 추천 상품을 찾을 수 있는 쿼리를 생성하여 Search Cluster에 요청을 한다.

이 방법은 현재 헬로마켓의 추천 시스템에 비해 상품을 미리 추출해놓지 않고 Search Cluster에 추천을 위한 데이터가 모두 저장되어 있기 때문에 상황에 맞는 Query Handler를 이용하여 추천 상품을 실시간으로 제공할 수 있다. 추천 점수를 고려하는 것은 Search Cluster에서 검색 엔진이 충분히 빠른 속도로 처리할 수 있을 것이라 기대하기 때문에 큰 문제가 없어보인다.

하지만, 쿠팡의 실시간 추천 시스템 구조를 그대로 가져오기에는 리소스도 부족하고 준비되지 않는 부분이 많아 부분적인 적용을 통해 개선할 예정이다.

## 새로운 추천 시스템 구조 

우선 현재 헬로마켓에서 적용하기 힘든 2가지 컴포넌트를 제외시켰다. 상품과 feature vector 정보를 저장하고 있는 matrix를 저장하는 HBase와 상황에 맞는 쿼리를 생성해주는 Query Handler가 그 대상으로써, HBase의 경우 TD를 통해 조회된 내용을 가공하여 검색엔진인 Elasticsearch의 child index에 바로 저장한다. 사실 로그 데이터를 ML로 가공하여 추천하기 좋은 matrix 정보를 가져야 하지만 전반적인 추천 시스템의 구조를 만드는 것을 우선적인 목표로 삼아 해당 부분은 추후 대안책을 찾아 개발할 예정이다. Query Handler도 마찬가지로 홈피드에서 바로 복잡한 쿼리를 사용하지 않을 예정이기 때문에 제외시켰다.

#### 사용자 클러스터링

```
TreasureData -> HM-Personal-Recommender(Batch) -> Recommender(gRPC) -> Redis
```

사용자 클러스터링 정보는 기존과 동일하게 recommender 서비스로부터 gRPC를 통해 제공받을 수 있다.

단, 사용자 클러스터링 정보는 주기적으로 갱신하되 계산량을 보다 1시간에 한번씩 변경하던 주기를 더 짧게 가져갈 예정이다. 

그리고 기존에는 성별, 나이, 관심 카테고리, 행동 패턴에 대한 내용만 저장하고 있었다면 더 개인화에 가까운 추천을 위해 헬로페이 구매 여부, 관심 상품 가격 범위, 사용 플랫폼(iOS, Android, Web, mWeb) 등의 정보를 추가할 예정이다.

#### 상품 인기도 반영

```
TreasureData -> HM-Item-Recommender-Indexing(Indexing Batch) -> Elasticsearch
```

상품 인기도는 Indexing Batch에 신규 잡을 생성하여 Elasticsearch의 item index에 child index를 생성하여 주기적으로 각 점수(남성 인기도, 30대 인기도 등)를 갱신한다. 이 때 사용자 클러스터링 정보는 gRPC 통신으로 recommender 서비스에 요청하여 전달받은 값을 활용한다.

#### 실시간 추천 상품 호출 

```
Redis -> Recommender(gRPC) -> API
Elasticsearch -> API 
```

이렇게 Elasticsearch에 갱신된 인기도 정보는 요청한 사용자의 클러스터링 정보에 따라 Elasticsearch Query를 만들어 조회한 후 서빙한다.

## 장점

우선 실시간으로 변경되는 상품 추천이 가능하다. 상품 인기도가 짧은 주기로 갱신되기 때문에 인기도가 계속 변경될 수 있다. 

두 번째로 사용자 특성에 따른 미세한 컨트롤이 가능하다. 만약 사용자가 여성의류 카테고리 상품을 보고 싶지 않다면 API레벨에서 쉽게 컨트롤 할 수 있다.

세 번째로 상품과 관계를 맺는 child index를 이용하여 상품의 상태 변경을 바로 반영할 수 있다. 삭제된 아이템이나 제재를 받은 상품은 실시간으로 추천 상품에서 제외가능하다.

네 번째로 무한 스크롤이 가능하다. 사용자가 원하는 한 거의 모든 헬로마켓 상품을 홈에서 볼 수 있다.

## 단점

검색 엔진 트래픽이 과중되어 문제가 생길 가능성이 있다.

child index query의 성능이 검증되지 않아 불안정하다. (속도가 느리다는 말이 있는데 1:1 관계라면 크게 문제가 없을 것 같다.)

## 유의해야 할 점

다양한 score function을 이용하여 추천 점수를 정교하게 만들어야 한다. 인기 상품이 계속되서 노출되지 않도록 decay score function을 활용할 필요가 있다.(점진적으로 점수 감소)

검색 엔진에 문제가 생길 경우 홈에 문제가 없도록 최소한의 방어코드가 필요하다.(기존 인기는 유지)

## 추가 진행 예정

API를 개선하여 사용자가 자신의 성별이나 연령, 좋아하지 않는 카테고리나 선호하는 카테고리를 직접 선택하여 홈 영역을 바로 변경시킬 수 있다.

유사 상품과 함께 본 상품 기능을 추천 시스템과 통합시킬 필요가 있다.

유사 상품과 함께 본 상품 기능을 추천 시스템에 통합시킨 후 홈피드에 내가 본 상품과 유사한 상품을 포함시킬 수 있도록 한다.

https://blog.mimacom.com/parent-child-elasticsearch/

